/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BlocksRouteRouteImport } from './routes/blocks/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as BlocksIndexRouteImport } from './routes/blocks/index'
import { Route as PreviewBlockIdRouteImport } from './routes/preview/$blockId'
import { Route as OgIndexDotpngRouteImport } from './routes/og/index[.]png'
import { Route as OgBlocksDotpngRouteImport } from './routes/og/blocks[.]png'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo/table'
import { Route as BlocksBlockIdRouteImport } from './routes/blocks/$blockId'
import { Route as OgBlocksBlockIdDotpngRouteImport } from './routes/og/blocks/$blockId[.]png'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo/start.api-request'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as DemoApiTqTodosRouteImport } from './routes/demo/api.tq-todos'
import { Route as DemoApiNamesRouteImport } from './routes/demo/api.names'
import { Route as BlocksPreviewBlockIdRouteImport } from './routes/blocks/preview/$blockId'
import { Route as DemoStartSsrIndexRouteImport } from './routes/demo/start.ssr.index'
import { Route as DemoStartSsrSpaModeRouteImport } from './routes/demo/start.ssr.spa-mode'
import { Route as DemoStartSsrFullSsrRouteImport } from './routes/demo/start.ssr.full-ssr'
import { Route as DemoStartSsrDataOnlyRouteImport } from './routes/demo/start.ssr.data-only'

const BlocksRouteRoute = BlocksRouteRouteImport.update({
  id: '/blocks',
  path: '/blocks',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksIndexRoute = BlocksIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlocksRouteRoute,
} as any)
const PreviewBlockIdRoute = PreviewBlockIdRouteImport.update({
  id: '/preview/$blockId',
  path: '/preview/$blockId',
  getParentRoute: () => rootRouteImport,
} as any)
const OgIndexDotpngRoute = OgIndexDotpngRouteImport.update({
  id: '/og/index.png',
  path: '/og/index.png',
  getParentRoute: () => rootRouteImport,
} as any)
const OgBlocksDotpngRoute = OgBlocksDotpngRouteImport.update({
  id: '/og/blocks.png',
  path: '/og/blocks.png',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksBlockIdRoute = BlocksBlockIdRouteImport.update({
  id: '/$blockId',
  path: '/$blockId',
  getParentRoute: () => BlocksRouteRoute,
} as any)
const OgBlocksBlockIdDotpngRoute = OgBlocksBlockIdDotpngRouteImport.update({
  id: '/og/blocks/$blockId.png',
  path: '/og/blocks/$blockId.png',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiTqTodosRoute = DemoApiTqTodosRouteImport.update({
  id: '/demo/api/tq-todos',
  path: '/demo/api/tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoApiNamesRoute = DemoApiNamesRouteImport.update({
  id: '/demo/api/names',
  path: '/demo/api/names',
  getParentRoute: () => rootRouteImport,
} as any)
const BlocksPreviewBlockIdRoute = BlocksPreviewBlockIdRouteImport.update({
  id: '/preview/$blockId',
  path: '/preview/$blockId',
  getParentRoute: () => BlocksRouteRoute,
} as any)
const DemoStartSsrIndexRoute = DemoStartSsrIndexRouteImport.update({
  id: '/demo/start/ssr/',
  path: '/demo/start/ssr/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrSpaModeRoute = DemoStartSsrSpaModeRouteImport.update({
  id: '/demo/start/ssr/spa-mode',
  path: '/demo/start/ssr/spa-mode',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrFullSsrRoute = DemoStartSsrFullSsrRouteImport.update({
  id: '/demo/start/ssr/full-ssr',
  path: '/demo/start/ssr/full-ssr',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartSsrDataOnlyRoute = DemoStartSsrDataOnlyRouteImport.update({
  id: '/demo/start/ssr/data-only',
  path: '/demo/start/ssr/data-only',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blocks': typeof BlocksRouteRouteWithChildren
  '/blocks/$blockId': typeof BlocksBlockIdRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/og/blocks.png': typeof OgBlocksDotpngRoute
  '/og/index.png': typeof OgIndexDotpngRoute
  '/preview/$blockId': typeof PreviewBlockIdRoute
  '/blocks/': typeof BlocksIndexRoute
  '/blocks/preview/$blockId': typeof BlocksPreviewBlockIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/og/blocks/$blockId.png': typeof OgBlocksBlockIdDotpngRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blocks/$blockId': typeof BlocksBlockIdRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/og/blocks.png': typeof OgBlocksDotpngRoute
  '/og/index.png': typeof OgIndexDotpngRoute
  '/preview/$blockId': typeof PreviewBlockIdRoute
  '/blocks': typeof BlocksIndexRoute
  '/blocks/preview/$blockId': typeof BlocksPreviewBlockIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/og/blocks/$blockId.png': typeof OgBlocksBlockIdDotpngRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr': typeof DemoStartSsrIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blocks': typeof BlocksRouteRouteWithChildren
  '/blocks/$blockId': typeof BlocksBlockIdRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/og/blocks.png': typeof OgBlocksDotpngRoute
  '/og/index.png': typeof OgIndexDotpngRoute
  '/preview/$blockId': typeof PreviewBlockIdRoute
  '/blocks/': typeof BlocksIndexRoute
  '/blocks/preview/$blockId': typeof BlocksPreviewBlockIdRoute
  '/demo/api/names': typeof DemoApiNamesRoute
  '/demo/api/tq-todos': typeof DemoApiTqTodosRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/og/blocks/$blockId.png': typeof OgBlocksBlockIdDotpngRoute
  '/demo/start/ssr/data-only': typeof DemoStartSsrDataOnlyRoute
  '/demo/start/ssr/full-ssr': typeof DemoStartSsrFullSsrRoute
  '/demo/start/ssr/spa-mode': typeof DemoStartSsrSpaModeRoute
  '/demo/start/ssr/': typeof DemoStartSsrIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blocks'
    | '/blocks/$blockId'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/og/blocks.png'
    | '/og/index.png'
    | '/preview/$blockId'
    | '/blocks/'
    | '/blocks/preview/$blockId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/og/blocks/$blockId.png'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blocks/$blockId'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/og/blocks.png'
    | '/og/index.png'
    | '/preview/$blockId'
    | '/blocks'
    | '/blocks/preview/$blockId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/og/blocks/$blockId.png'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr'
  id:
    | '__root__'
    | '/'
    | '/blocks'
    | '/blocks/$blockId'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/og/blocks.png'
    | '/og/index.png'
    | '/preview/$blockId'
    | '/blocks/'
    | '/blocks/preview/$blockId'
    | '/demo/api/names'
    | '/demo/api/tq-todos'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/og/blocks/$blockId.png'
    | '/demo/start/ssr/data-only'
    | '/demo/start/ssr/full-ssr'
    | '/demo/start/ssr/spa-mode'
    | '/demo/start/ssr/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlocksRouteRoute: typeof BlocksRouteRouteWithChildren
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  OgBlocksDotpngRoute: typeof OgBlocksDotpngRoute
  OgIndexDotpngRoute: typeof OgIndexDotpngRoute
  PreviewBlockIdRoute: typeof PreviewBlockIdRoute
  DemoApiNamesRoute: typeof DemoApiNamesRoute
  DemoApiTqTodosRoute: typeof DemoApiTqTodosRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  OgBlocksBlockIdDotpngRoute: typeof OgBlocksBlockIdDotpngRoute
  DemoStartSsrDataOnlyRoute: typeof DemoStartSsrDataOnlyRoute
  DemoStartSsrFullSsrRoute: typeof DemoStartSsrFullSsrRoute
  DemoStartSsrSpaModeRoute: typeof DemoStartSsrSpaModeRoute
  DemoStartSsrIndexRoute: typeof DemoStartSsrIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/blocks': {
      id: '/blocks'
      path: '/blocks'
      fullPath: '/blocks'
      preLoaderRoute: typeof BlocksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/': {
      id: '/blocks/'
      path: '/'
      fullPath: '/blocks/'
      preLoaderRoute: typeof BlocksIndexRouteImport
      parentRoute: typeof BlocksRouteRoute
    }
    '/preview/$blockId': {
      id: '/preview/$blockId'
      path: '/preview/$blockId'
      fullPath: '/preview/$blockId'
      preLoaderRoute: typeof PreviewBlockIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/og/index.png': {
      id: '/og/index.png'
      path: '/og/index.png'
      fullPath: '/og/index.png'
      preLoaderRoute: typeof OgIndexDotpngRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/og/blocks.png': {
      id: '/og/blocks.png'
      path: '/og/blocks.png'
      fullPath: '/og/blocks.png'
      preLoaderRoute: typeof OgBlocksDotpngRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/$blockId': {
      id: '/blocks/$blockId'
      path: '/$blockId'
      fullPath: '/blocks/$blockId'
      preLoaderRoute: typeof BlocksBlockIdRouteImport
      parentRoute: typeof BlocksRouteRoute
    }
    '/og/blocks/$blockId.png': {
      id: '/og/blocks/$blockId.png'
      path: '/og/blocks/$blockId.png'
      fullPath: '/og/blocks/$blockId.png'
      preLoaderRoute: typeof OgBlocksBlockIdDotpngRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/tq-todos': {
      id: '/demo/api/tq-todos'
      path: '/demo/api/tq-todos'
      fullPath: '/demo/api/tq-todos'
      preLoaderRoute: typeof DemoApiTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/api/names': {
      id: '/demo/api/names'
      path: '/demo/api/names'
      fullPath: '/demo/api/names'
      preLoaderRoute: typeof DemoApiNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blocks/preview/$blockId': {
      id: '/blocks/preview/$blockId'
      path: '/preview/$blockId'
      fullPath: '/blocks/preview/$blockId'
      preLoaderRoute: typeof BlocksPreviewBlockIdRouteImport
      parentRoute: typeof BlocksRouteRoute
    }
    '/demo/start/ssr/': {
      id: '/demo/start/ssr/'
      path: '/demo/start/ssr'
      fullPath: '/demo/start/ssr'
      preLoaderRoute: typeof DemoStartSsrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/spa-mode': {
      id: '/demo/start/ssr/spa-mode'
      path: '/demo/start/ssr/spa-mode'
      fullPath: '/demo/start/ssr/spa-mode'
      preLoaderRoute: typeof DemoStartSsrSpaModeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/full-ssr': {
      id: '/demo/start/ssr/full-ssr'
      path: '/demo/start/ssr/full-ssr'
      fullPath: '/demo/start/ssr/full-ssr'
      preLoaderRoute: typeof DemoStartSsrFullSsrRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/ssr/data-only': {
      id: '/demo/start/ssr/data-only'
      path: '/demo/start/ssr/data-only'
      fullPath: '/demo/start/ssr/data-only'
      preLoaderRoute: typeof DemoStartSsrDataOnlyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface BlocksRouteRouteChildren {
  BlocksBlockIdRoute: typeof BlocksBlockIdRoute
  BlocksIndexRoute: typeof BlocksIndexRoute
  BlocksPreviewBlockIdRoute: typeof BlocksPreviewBlockIdRoute
}

const BlocksRouteRouteChildren: BlocksRouteRouteChildren = {
  BlocksBlockIdRoute: BlocksBlockIdRoute,
  BlocksIndexRoute: BlocksIndexRoute,
  BlocksPreviewBlockIdRoute: BlocksPreviewBlockIdRoute,
}

const BlocksRouteRouteWithChildren = BlocksRouteRoute._addFileChildren(
  BlocksRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlocksRouteRoute: BlocksRouteRouteWithChildren,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  OgBlocksDotpngRoute: OgBlocksDotpngRoute,
  OgIndexDotpngRoute: OgIndexDotpngRoute,
  PreviewBlockIdRoute: PreviewBlockIdRoute,
  DemoApiNamesRoute: DemoApiNamesRoute,
  DemoApiTqTodosRoute: DemoApiTqTodosRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  OgBlocksBlockIdDotpngRoute: OgBlocksBlockIdDotpngRoute,
  DemoStartSsrDataOnlyRoute: DemoStartSsrDataOnlyRoute,
  DemoStartSsrFullSsrRoute: DemoStartSsrFullSsrRoute,
  DemoStartSsrSpaModeRoute: DemoStartSsrSpaModeRoute,
  DemoStartSsrIndexRoute: DemoStartSsrIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
