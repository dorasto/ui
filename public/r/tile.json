{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tile",
  "type": "registry:block",
  "title": "Tile",
  "author": "Tommy Lundy <tommerty@doras.to>",
  "description": "Flexible tile components for displaying content with multiple variants",
  "dependencies": [
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/tile/tile.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst tileVariants = cva(\n\t\"rounded-lg p-3 transition-all flex items-center justify-between gap-9 hover:shadow-sm md:w-fit w-full\",\n\t{\n\t\tvariants: {\n\t\t\tvariant: {\n\t\t\t\tdefault: \"bg-card\",\n                transparent: \"bg-transparent\",\n\t\t\t\toutline: \"border\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\tvariant: \"default\",\n\t\t},\n\t}\n);\n\n// Context to share variant with children\nconst TileContext = React.createContext<{\n\tvariant?: \"default\" | \"transparent\" | \"outline\" | null;\n}>({\n\tvariant: \"default\",\n});\n\nconst useTileContext = () => {\n\tconst context = React.useContext(TileContext);\n\treturn context;\n};\n\nfunction Tile({\n\tclassName,\n\tvariant,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof tileVariants> & {\n\tasChild?: boolean;\n}) {\n\tconst Comp = asChild ? Slot : \"div\";\n\t\n\treturn (\n\t\t<TileContext.Provider value={{ variant }}>\n\t\t\t<Comp\n\t\t\t\tclassName={cn(tileVariants({ variant, className }))}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t</TileContext.Provider>\n\t);\n}\n\ninterface TileHeaderProps extends React.ComponentProps<\"div\"> {\n\tasChild?: boolean;\n}\nfunction TileHeader({\n\tclassName,\n\tchildren,\n\tasChild = false,\n\t...props\n}: TileHeaderProps) {\n\tconst Comp = asChild ? Slot : \"div\";\n\t\n\t// Separate TileIcon from other children\n\tconst childrenArray = React.Children.toArray(children);\n\tconst tileIcon = childrenArray.find(\n\t\t(child) => React.isValidElement(child) && child.type === TileIcon\n\t);\n\tconst otherChildren = childrenArray.filter(\n\t\t(child) => React.isValidElement(child) && child.type !== TileIcon\n\t);\n\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(\"flex items-center gap-3\", className)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{tileIcon && (\n\t\t\t\t<>\n\t\t\t\t\t{tileIcon}\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<div className=\"flex flex-col flex-1\">\n\t\t\t\t{otherChildren}\n\t\t\t</div>\n\t\t</Comp>\n\t);\n}\n\nfunction TileIcon({\n\tclassName,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"div\"> & {\n\tasChild?: boolean;\n}) {\n\tconst Comp = asChild ? Slot : \"div\";\n\tconst { variant } = useTileContext();\n\t\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(\n\t\t\t\t\"shrink-0 [&_svg]:size-4 p-1 rounded\",\n\t\t\t\tvariant === \"outline\" ? \"border\" : \"bg-accent\",\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction TileTitle({\n\tclassName,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"div\"> & {\n\tasChild?: boolean;\n}) {\n\tconst Comp = asChild ? Slot : \"div\";\n\t\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(\"font-medium text-sm\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction TileDescription({\n\tclassName,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"p\"> & {\n\tasChild?: boolean;\n}) {\n\tconst Comp = asChild ? Slot : \"p\";\n\t\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(\"text-sm text-muted-foreground\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction TileAction({\n\tclassName,\n\tasChild = false,\n\t...props\n}: React.ComponentProps<\"div\"> & {\n\tasChild?: boolean;\n}) {\n\tconst Comp = asChild ? Slot : \"div\";\n\t\n\treturn (\n\t\t<Comp\n\t\t\tclassName={cn(\"flex items-center gap-2\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nexport { Tile, TileHeader, TileTitle, TileIcon, TileDescription, TileAction, tileVariants };\n",
      "type": "registry:component",
      "target": "components/doras-ui/tile.tsx"
    }
  ],
  "categories": [
    "general"
  ]
}